"""
Кучмистый Антон Романович ИУ7-11Б
Лабораторная работа №4

Написать программу, которая для заданных по варианту функций выведет таблицу
значений этих функций на некотором отрезке и построит график одной из них.
Заданные значения из таблицы:
нач.знач: 1     конеч.знач: 2     шаг:0.025
"""
import sys
from math import sqrt, isclose

# Блок ввода перевменных (начальная точка, конечная точка и шаг)

start_pose = float(input("Введите начальное значение аргумента: "))
end_pose = float(input("Введите конечное значение аргумента: "))
step = float(input("Введите шаг разбиения отрезка: "))

# Проверка на работоспособность программы

if start_pose > end_pose:
    sys.exit("Ошибка: начальное значение аргумента больше конечного")
elif isclose(end_pose - start_pose, 0):
    sys.exit("Ошибка: расстояние между точками слишком мало")
elif step < 0:
    sys.exit("Ошибка: шаг отрицателен")
elif step == 0:
    sys.exit("Ошибка: шаг очень мал")

# Кол-во "засечек" нашей программы:
# Ввод колличества "засечек" (от 4 до 8) они будут располагаться на оси ординат

count_tt = int(((end_pose - start_pose) / step) + 1)
count_kk = 0

# Условие для ввода нужного диапозона

points = 0
while points < 4 or points > 8:
    points = int(input("Введите ко-во засечек (от 4 до 8): "))
    if points < 4 or points > 8:
        print("Число засечек не в диапозоне")

# Постороение таблицы через print
# Дополнительное задание: посчитать кол-во отрицательных значений g2
# для этого ввожу счётчик, и сравниваю данные значения

min_func = float("inf")
max_func = float("-inf")

print("-" * 77)
print("|        x         |        g1        |        g2        |        g3        |")
print("-" * 77)
task_1 = 0
f_points = []
x = start_pose
for i in range(count_tt):
    g1 = round(x ** x + 2 * x - 6, 5)
    g2 = round(x ** 2 - 1, 5)
    g3 = round(sqrt(abs(g1 * g2)), 5)
    print("|     ", round(x, 5), ' ' * (15 - 5 - len(str(round(x, 5)))), "|     ", g1, ' ' * (10 - len(str(g1))),
          "|     ",
          g2, ' ' * (10 - len(str(g2))), "|     ", g3, ' ' * (10 - len(str(g3))), "|")
    x += step
    f_points.append((round(x, 2), g2))
    if g2 < 0:
        task_1 += 1
    if g2 > max_func:
        max_func = g2
    if g2 < min_func:
        min_func = g2
print("-" * 77)

# Вывод моего дополнительного задания

print(f"количество отрицательных значений g2: {task_1}")

# Проверка на то что наш массив не нолевой:

if len(f_points) != 0:

    # По условию у нас может быть от 5 до 7 значащих цифр числа в форматном выводе
    # Далее вводим максимальный "размер" функции, в моем случае 95

    size = 101
    print("Получим график функции: ")
    print("-" * (size + 11))
    print("|    x   |", end="")

    # Мы считем сколько пробелов нужно считать между засечками зная что они 14 символов в длину
    # и сколько Нам нужно напечатать доп пробелов чтобы они заполнили строку таблицы полностью

    # Построение значений с "засечками"

    point_delta = (max_func - min_func) / (points - 1)  # рассчёт шага
    point_gap_size = (size - 11 * points) // (points - 1)  # рассчёт пробелов после
    point_extra_spaces = (size - 11 * points) % (points - 1)  # пробелы до *
    for i in range(points):
        points_value = min_func + point_delta * i
        print(f"{points_value: 11.5g}", end="")
        if i != (points - 1):
            print(" " * point_gap_size, end="")
        if point_extra_spaces > 0:
            print(" ", end="")
            point_extra_spaces -= 1
    print("|")
    print("-" * (size + 11))

    # Так как в моём задании дано 3 графика функции, по условию я могу выбрать какой из них строить
    # для построения я выбрал график g2, т.к. с ним было связано доп. задание (g2=x ** 3 - x - 1)

    # Построение самого графика с помощью ранее внесенных значений в список при помощи "*"

    gap = (max_func - min_func) / (size - 1)
    for (x, g2) in f_points:
        print(f"|{x:8g}", end="|")

        # gap - "размер символа". если значение попадает
        # в символ - то мы его рисуем
        # абсциссу рисуем когда 0 попал в данную зону
        # иначе пробел

        for i in range(size):
            if min_func + gap * i <= g2 < min_func + gap * (i + 1):
                print("*", end="")
            elif min_func + gap * i <= 0 < min_func + gap * (i + 1):
                print("|", end="")
            else:
                print(" ", end="")
        print("|")
    print("-" * (size + 11))
else:
    print("Точек нет. График построить невозможно")
